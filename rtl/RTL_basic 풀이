RTL_basic 풀이


0x080483b0  read@plt
0x080483c0  printf@plt
0x080483d0  fflush@plt
0x080483e0  puts@plt

사용자 정의 함수

0x0804852d  ezy
0x08048569  ret
0x080485c4  ori
0x0804862c  pro
0x08048661  main

system 함수가 보이지 않는 대신, 사용자 정의 함수들이 보임.
실행시에 나오는 ezy 함수에서는 64바이트를 입력받는다.
다른 함수들을 디스어셈블 해보면 

맨 앞에 있는 ret 함수에서 찾은것

0x8048774 = "./flag.txt"
ret함수 어셈 분석 결과 [ebp+0x8],0xbadbeeef 이 같으면 위 플래그파일 여는 부분으로 진행됨이 보임.
그러나 파일을 열기만 할뿐, 안의 내용을 출력한다거나 하는것은 보이지가 않는다.
이때 open된 값은 0x0804a060 로 전달이 되는데, 이 변수가 파일 디스크립터로 쓰인 전역 변수로 확인된다.

이다음 ori함수 어셈을 분석하면, 0x804a060 을 eax로 전달하여 read 함수를 호출하는 부분이 있는데,
ebp+0x8 과 0xabcdefff를 비교하는 분기문과
ebp+0xc 와 0x78563412를 비교하는 두개의 분기문이 있다. 
ori 함수 인의 read 함수는 내용을 읽어들인 다음 0x804a080 변수로 전달하는데, 이 변수 또한 전역변수로 사용된다.

마지막 pro 함수 어셈을 분석하면 0x804a080 변수의 값을 출력해주는 부분이 있다. 


따라서, ret 함수 내의 open 함수를 통해 파일을 연다음, ori 함수 내의 read 함수 에서 파일 내용을 받아온 후, 
pro 함수 내의 printf함수에서 내용을 출력하게끔 하는 식으로 진행이 되어야 한다.

프로그램의 실행 흐름을 조작하여 ret 함수가 실행 되게끔 하고, ret 함수 실행시점에 ebp+8 위치에 0xbadbeeef 이 들어가게끔 만들면 되는것같다. 

함수 진행 순서

원래 main -> ezy-> (ezy)puts -> (ezy)fflush -> (ezy)read -> puts 인데 

ezy함수에서 입력받는 부분인 read는 0x28 위치에 버퍼를 가지고 있으니 이 부분에 공격 코드를 삽입하는 방향으로 정하고

main -> ezy -> (ezy)puts -> (ezy)fflush -> (ezy)read -> ret -> ori -> pro 로 바꾸는 식으로 가보자.

최대 입력 가능 버퍼가 64바이트 임을 생각해서 코드를 짜보자.
공격에 필요한 글자들의 바이트 수를 종합하면 64바이트가 넘어 중간에 페이로드가 짤리는 문제가 발생한다.
하지만 RTL의 특성인 함수를 여러번 호출한다는 특징을 이용하여 , 
입력값을 받는 부분인 ezy 함수를 여러번 호출하는 방식으로 진행을 해보자.

예상 공격스택

buf[40]
dummy 4b / (ezy)read.ebp
ret함수 주소 / (ezy)read.ret
popret / 0x8048395
0xbadbeeef / 분기 비교문
ori 함수 주소
popret 4b /0x8048395 여기서 최대 입력 가능 글자를 초과하여 페이로드가 짤리므로 , 각각의 함수를 호출할 때 마다 ezy를 다시 불러오는 , 일종의 재귀적인 방식으로 스택을 다시 짜보자.
0xabcdefff / 분기 비교문 
0x78563412 / 분기 비교문
pro 함수 주소 


새로 짠 공격 스택 

buf[40]
dummy 4b / (ezy)read.ebp
ret함수 주소 / (ezy)read.ret
ezy함수 주소 / 0x0804852d
0xbadbeeef / 분기 비교문
 


buf[40]
dummy 4b / (ezy)read.ebp
ori함수 주소 / (ezy)read.ret
ezy함수 주소 / 0x0804852d 
0xabcdefff / 분기 비교문
0x78563412 / 분기 비교문



buf[40]
dummy 4b / (ezy)read.ebp
pro함수 주소 / (ezy)read.ret













